@use "sass:math";

// pxからremへの計算式
// 例：rem(32) → 2rem
// デザインカンプはルートフォント=150%での値のため 16*1.5 で割る
@function rem($pixels) {
  @return math.div($pixels, 16 * 1.5) * 1rem;
}

// 数値のみを取り出す 
// 例：strip-unit(16px) → 16
@function strip-unit($number) {
  @if type-of($number) == "number" and not unitless($number) {
    @return math.div($number, $number * 0 + 1);
  }
  @return $number;
}

// フォントサイズ ÷ 画面幅 * 100vw の計算 
// 例：vw(1250px, 16px) → 16px ÷ 1250px × 100vw
@function vw($window_width, $size) {
	@return math.div($size, $window_width) * 100vw;
}

// 指定した画面幅の最小と最大を補間する関数
// 例：liquid(375, 16, 768, 32) -> 幅375pxのときに16px、768pxのときに32pxになるように補間
@function liquid($minFs, $minVw, $maxFs, $maxVw, $base:16) {
  $minFsRem: math.div($minFs, $base);
  $minVwRem: math.div($minVw, $base);
  $maxFsRem: math.div($maxFs, $base);
  $maxVwRem: math.div($maxVw, $base);

  $factor: math.div(1, ($maxVwRem - $minVwRem)) * ($maxFsRem - $minFsRem);
  $calcRem: round-decimal($minFsRem - $minVwRem * $factor, 5);
  $calcVw: round-decimal(100.0 * $factor, 5);
  $calc: "#{$calcRem}rem + #{$calcVw}vw";
  $min: round-decimal(math.min($minFsRem, $maxFsRem), 5);
  $max: round-decimal(math.max($minFsRem, $maxFsRem), 5);
  $clamp: clamp(#{$min}rem, #{$calc}, #{$max}rem);
  @return $clamp;
}

// Round (四捨五入)
@function round-decimal ($number, $digits: 0) {
  @return to-fixed($number, $digits, 'round');
}

// Ceil (切り上げ)
@function ceil-decimal ($number, $digits: 0) {
  @return to-fixed($number, $digits, 'ceil');
}

// Floor (切り捨て)
@function floor-decimal ($number, $digits: 0) {
  @return to-fixed($number, $digits, 'floor');
}

@function to-fixed ($number, $digits: 0, $round: 'round') {
  $n: 1;
  // $number must be a number
  @if type-of($number) != number {
      @warn '#{ $number } is not a number.';
      @return $number;
  }
  // $digits must be a unitless number
  @if type-of($digits) != number {
      @warn '#{ $digits } is not a number.';
      @return $number;
  } @else if not unitless($digits) {
      @warn '#{ $digits } has a unit.';
      @return $number;
  }
  @for $i from 1 through $digits {
      $n: $n * 10;
  }
  @if $round == 'round' {
      @return round($number * $n) / $n;
  } @else if $round == 'ceil' {
      @return ceil($number * $n) / $n;
  } @else if $round == 'floor' {
      @return floor($number * $n) / $n;
  } @else {
      @warn '#{ $round } is undefined keyword.';
      @return $number;
  }
}
